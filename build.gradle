plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.diffplug.spotless' version '6.23.3'
}

group = 'aurora'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    // spring security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // spring test
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.mockito:mockito-core:5.0.0'

    // querydsl 스프링 3.0 이상 버전
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'

    //firebase
    implementation 'com.google.firebase:firebase-admin:9.1.0'

    //aws
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    //json
    implementation 'org.json:json:20230227'

    //es
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'

}

def querydslSrcDir = 'src/main/generated'

clean {
    delete file(querydslSrcDir)
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('updateGitHooks', Copy) {
    from new File(rootProject.rootDir, '.script/pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks') }
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        Runtime.getRuntime().exec("cmd /c chmod -R +x .git/hooks/")
    } else {
        Runtime.getRuntime().exec("chmod -R +x .git/hooks/")
    }
}
tasks.named('compileJava') {
    dependsOn 'spotlessApply'
    dependsOn 'updateGitHooks'
}

def generated = 'src/main/generated'
tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

clean {
    delete file(generated)
}

spotless {
    java {
        //사용하지 않는 import 제거
        removeUnusedImports()
        // 공백 제거
        trimTrailingWhitespace()
        // 끝부분 NewLine 처리
        endWithNewline()
        // Google Java 포맷 적용 -> 탭은 4개의 공백
        googleJavaFormat().aosp()
        // import 정렬
        importOrder('java', 'javax', 'jakarta', 'org', 'com')
    }
}

jar {
    enabled = false
}